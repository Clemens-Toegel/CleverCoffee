%HEADER%
    <script type="module">
        /**
         * Takes an array of objects and returns an object of arrays with the same value for key
         */
        function groupBy(array, key) {
            const result = {}
            array.forEach(item => {
                if (!result[item[key]]) {
                    result[item[key]] = []
                }
                result[item[key]].push(item)
            })
            return result
        }

        const app = Vue.createApp({
            data() {
                return {
                    parameters: [],
                    parameterSections: [],
                    parametersHelpTexts: [],
                    isPostingForm: false
                }
            },
            mounted() {
                this.fetchParameters()
            },
            methods: {
                fetchParameters() {
                    fetch("/parameters")
                        .then(response => response.json())
                        .then(data => {
                            this.parameters = data
                            this.getParameterSections()
                        })
                        .catch(err => console.log(err.messages))
                },
                postParameters() {
                    //post parameter array same as if it was posted from a form
                    var formBody = [];
                    this.parameters.forEach(param => {
                        var encodedKey = encodeURIComponent(param.name);
                        var encodedValue = encodeURIComponent(param.value);
                        formBody.push(encodedKey + "=" + encodedValue);
                    });
                    formBody = formBody.join("&");

                    const requestOptions = {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        cache: 'no-cache',
                        body: formBody
                    };
                    this.isPostingForm = true
                    fetch("/parameters", requestOptions)
                        .then(response => 0)
                        .catch(err => console.log(err.messages))
                        .finally(() => {
                            this.isPostingForm = false
                            //refresh parameters to be shown
                            this.fetchParameters()
                        })
                },
                fetchHelpText(paramName) {
                    if (!(paramName in this.parametersHelpTexts)) {
                        fetch("/parameterHelp/?param="+paramName)
                            .then(response => response.json())
                            .then(data => { this.parametersHelpTexts[paramName] = data['helpText'] })
                    }
                },
                getParameterSections() {
                    var sections = groupBy(this.parameters, "section")
                    this.parameterSections = sections
                },
                sectionName(sectionId) {
                    const sectionNames = {
                        0: 'PID Parameters',
                        1: 'Temperature and Preinfusion',
                        2: 'Brew Detection and Brew PID Parameters'
                    }
                    return sectionNames[sectionId]
                }
            }
        }).mount('#parameters')
    </script>

    <div class="content-wrapper">
        <div class="container my-5">
            <div id="parameters">
                <div class="card card-accent-dark mb-5 shadow-sm rounded">
                    <template v-for="(section, sectionKey) in parameterSections">
                        <div class="card-body bg-light pb-1 rounded">
                            <h5 class="card-title"> {{ sectionName(sectionKey) }} </h5>
                        </div>
                        <div class="card-body">
                            <form @submit.prevent="postParameters">
                                <div class="row row-cols-2 row-cols-md-4 row-cols-lg-6">
                                    <template v-for="param in section">
                                        <div class="col-md-3">
                                            <label class="form-label me-1 col-form-label" :for="'var'+param.name">{{param.displayName}}</label>
                                            <template v-if="param.hasHelpText">
                                                <a href="#" role="button" @mouseover="fetchHelpText(param.name)" data-bs-toggle="popover" data-bs-html="true" :data-bs-original-title="parametersHelpTexts[param.name]">
                                                    <span class="fa fa-question-circle"></span>
                                                </a>
                                            </template>
                                        </div>
                                        <div class="col-md-3">
                                            <div v-if="param.type == 1" class="col-5 mb-1">
                                                <input type="hidden" :id="'var'+param.name" :name="'var'+param.name" :value="0">
                                                <input type="checkbox" class="form-check-input form-control-lg" :id="'var'+param.name" :name="'var'+param.name" value="1" @change="param.value = 1-param.value" :checked="param.value != 0 ? 'checked' : null">
                                            </div>
                                            <div v-if="param.type == 2 || param.type == 5" class="col-5 mb-1">
                                                <input class="form-control form-control-lg" type="number" step="0.1" :id="'var'+param.name" :name="'var'+param.name" v-model="param.value" style="min-width: 5em;">
                                            </div>
                                        </div>
                                    </template>
                                </div>
                                <br>
                                <div class="float-end me-2">
                                    <button type="submit" class="btn btn-primary" :disabled="isPostingForm">
                                        <span v-show="isPostingForm" class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        Save
                                    </button>
                                </div>
                            </form>
                        </div>
                    </template>
                </div>
            </div>

            <div class="card card-accent-dark mb-5 shadow-sm rounded">
                <div class="card-body bg-light pb-1 rounded">
                    <h5 class="card-title">
                        Load Factory Defaults
                    </h5>
                </div>
                <div class="card-body">
                    <h5>TODO...</h5>
                </div>
            </div>
        </div>
    </div>
%FOOTER%
